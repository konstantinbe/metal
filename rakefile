#
# Copyright (c) 2014 Konstantin Bender.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'rubygems'

# ------------------------------------------------------------- Constants ------

NAME = ENV['name'] || "metal"
TARGET = ENV['target'] || "test"
VERSION = ENV['version'] || 'x.x.x'
DIRECTORY = ENV['directory'] || "build"

CLANG = `which clang`.match /.+/
LLDB = `which lldb`.match /.+/
GCC = `which gcc`.match /.+/
GDB = `which gdb`.match /.+/

COMPILER = ENV['compiler'] || CLANG || GCC
DEBUGGER = ENV['debugger'] || LLDB || GDB

FLAGS = "-g -std=gnu99 -Wall -Wextra -Wno-unused-parameter -Wno-unused-function -Wno-unused-variable -Wno-missing-braces"
FLAGS_TEST = "-DTEST=1 -O0"
FLAGS_DEBUG = "-DDEBUG=1 -O0"
FLAGS_RELEASE ="-DRELEASE=1 -Os"
FLAGS_PROFILE = "#{FLAGS_DEBUG} -fprofile-arcs -ftest-coverage"
FLAGS_ANALYZE = "#{FLAGS_DEBUG} --analyze"

FLAGS_TARGET = FLAGS_TEST if TARGET == "test"
FLAGS_TARGET = FLAGS_DEBUG if TARGET == "debug"
FLAGS_TARGET = FLAGS_RELEASE if TARGET == "release"
FLAGS_TARGET = FLAGS_PROFILE if TARGET == "profile"
FLAGS_TARGET = FLAGS_ANALYZE if TARGET == "analyze"
FLAGS_TARGET = "" unless defined? FLAGS_TARGET

# ---------------------------------------------------------------- Colors ------

TERMINAL = STDOUT.tty?

BOLD = TERMINAL ? "\x1B[0;1m" : ""
RESET = TERMINAL ? "\x1B[0m" : ""

BLACK = TERMINAL ? "\x1B[0;30m" : ""; RED = TERMINAL ? "\x1B[0;31m" : ""; GREEN = TERMINAL ? "\x1B[0;32m" : ""; YELLOW = TERMINAL ? "\x1B[0;33m" : ""; BLUE = TERMINAL ? "\x1B[0;34m" : ""; MAGENTA = TERMINAL ? "\x1B[0;35m" : ""; CYAN = TERMINAL ? "\x1B[0;36m" : ""; WHITE = TERMINAL ? "\x1B[0;37m" : ""
BLACK_BRIGHT = TERMINAL ? "\x1B[1;30m" : ""; RED_BRIGHT = TERMINAL ? "\x1B[1;31m" : ""; GREEN_BRIGHT = TERMINAL ? "\x1B[1;32m" : ""; YELLOW_BRIGHT = TERMINAL ? "\x1B[1;33m" : ""; BLUE_BRIGHT = TERMINAL ? "\x1B[1;34m" : ""; MAGENTA_BRIGHT = TERMINAL ? "\x1B[1;35m" : ""; CYAN_BRIGHT = TERMINAL ? "\x1B[1;36m" : ""; WHITE_BRIGHT = TERMINAL ? "\x1B[1;37m" : ""

OK = GREEN + "OK" + RESET
FAILED = RED + "FAILED" + RESET

# ----------------------------------------------------------------- Tasks ------

desc "show help"
task :help do
  run "rake -T", :silent => true
end

desc "build library, tests, and benchmarks"
task :build => ['build:source', 'build:library', 'build:tests', 'build:benchmarks'] do
  # Nothing to do yet.
end

desc "build source"
task 'build:source' do
  header_files = FileList["source/*.h"]
  source_files = FileList["source/*.c"]

  run "mkdir -p #{DIRECTORY}/source"
  run "rm -rf #{DIRECTORY}/source/*.a"

  put "Compiling source ... "
  source_files.each do |source_file|
    source = source_file
    sources = [source_file] + header_files
    destination = "#{DIRECTORY}/" + source_file.gsub('.c', '')
    run "#{COMPILER} #{FLAGS} #{FLAGS_TARGET} -c -o #{destination}.o #{source}" unless uptodate? "#{destination}", sources
  end
  puts OK
end

desc "bundle library"
task 'build:library' => 'build:source' do
  put "Bundling library ... "
  run "rm -rf #{DIRECTORY}/#{NAME}"
  run "mkdir -p #{DIRECTORY}/#{NAME}"
  run "ar rcs #{DIRECTORY}/#{NAME}/lib#{NAME}.a #{DIRECTORY}/source/*.o"
  run "cp source/*.h #{DIRECTORY}/#{NAME}/"
  puts OK
end

desc "build tests"
task 'build:tests' => 'build:library' do
  header_files = FileList["tests/*.h"]
  source_files = FileList["tests/*.c"]

  run "mkdir -p #{DIRECTORY}/tests"
  run "rm -rf #{DIRECTORY}/tests/*.a"

  put "Compiling tests ... "
  source_files.each do |source_file|
    source = source_file
    sources = [source_file] + header_files
    destination = "#{DIRECTORY}/" + source_file.gsub('.c', '')
    run "#{COMPILER} #{FLAGS} #{FLAGS_TARGET} -I#{DIRECTORY} -c -o #{destination}.o #{source}" unless uptodate? "#{destination}", sources
  end
  puts OK

  put "Bundling tests ... "
  run "#{COMPILER} #{FLAGS} #{FLAGS_TARGET} -o #{DIRECTORY}/test #{DIRECTORY}/tests/*.o #{DIRECTORY}/#{NAME}/lib#{NAME}.a"
  puts OK
end

desc "build benchmarks"
task 'build:benchmarks' => 'build:library' do
  header_files = FileList["benchmarks/*.h"]
  source_files = FileList["benchmarks/*.c"]

  run "mkdir -p #{DIRECTORY}/benchmarks"
  run "rm -rf #{DIRECTORY}/benchmarks/*.a"

  put "Compiling benchmarks ... "
  source_files.each do |source_file|
    source = source_file
    sources = [source_file] + header_files
    destination = "#{DIRECTORY}/" + source_file.gsub('.c', '')
    run "#{COMPILER} #{FLAGS} #{FLAGS_TARGET} -I#{DIRECTORY} -c -o #{destination}.o #{source}" unless uptodate? "#{destination}", sources
  end
  puts OK

  put "Bundling benchmarks ... "
  run "#{COMPILER} #{FLAGS} #{FLAGS_TARGET} -o #{DIRECTORY}/benchmark #{DIRECTORY}/#{NAME}/lib#{NAME}.a #{DIRECTORY}/benchmarks/*.o"
  puts OK
end

desc "build & run tests"
task :test do
  run "rake build:tests target=test directory=#{DIRECTORY}/test"

  puts "Running #{WHITE_BRIGHT + NAME + RESET} tests ... "
  code = run "cd #{DIRECTORY}/test; ./test", :silent => true
  exit code
end

desc "build & debug tests"
task :debug do
  run "rake build:tests target=debug directory=#{DIRECTORY}/debug"

  puts "Debugging #{WHITE_BRIGHT + NAME + RESET} tests ... "
  code = run "cd #{DIRECTORY}/test; #{DEBUGGER} test", :silent => true
  exit code
end

desc "build & run benchmarks"
task :benchmark do
  run "rake build target=benchmark directory=#{DIRECTORY}/benchmark"

  puts "Running #{WHITE_BRIGHT + NAME + RESET} benchmarks ... "
  code = run "cd #{DIRECTORY}/benchmark; ./benchmark", :silent => true
  exit code
end

desc "build & analyze code"
task :analyze do
  run "rake build:source target=analyze directory=#{DIRECTORY}/analyze"
end

desc "build & analyze memory"
task :valgrind do
  run "rake build:tests target=debug directory=#{DIRECTORY}/valgrind"

  put "Running #{WHITE_BRIGHT + NAME + RESET} with Valgrind ... "
  assert command?("valgrind"), "#{FAILED}\n\nCan't analyze memory, Valgrind not command"
  run "valgrind --leak-check=full --track-origins=yes #{DIRECTORY}/test"
  puts OK
end

desc "build & profile"
task :profile do
  # TODO: implement.
end

desc "build website"
task :website do
  put "Building website ... "
  assert gem?("redcarpet"), "#{FAILED}\nCan't build website, Redcarpet (ruby gem) not found"

  require 'redcarpet'
  markdown = Redcarpet::Markdown.new Redcarpet::Render::HTML, :autolink => true, :space_after_headers => true

  run "mkdir -p #{DIRECTORY}/website"
  run "rm -rf #{DIRECTORY}/website/*"
  run "cp website/* #{DIRECTORY}/website/"
  index_html = load "website/index.html"
  content_md = load "website/content.md"
  index_html = index_html.gsub "<!-- content.md -->", markdown.render(content_md)
  save "#{DIRECTORY}/website/index.html", index_html
  puts OK
end

desc "delete the build directory"
task :clean do
  put "Cleaning ... "
  run "rm -rf #{DIRECTORY}"
  puts OK
end

# ------------------------------------------------------------- Functions ------

def assert(condition, message = "")
  unless condition
    puts message + "\n\n"
    exit 1
  end
end

def check(condition)
  unless condition
    puts FAILED
    exit 1
  end
end

def run(command, options = {})
  success = system command
  check success unless options[:silent]
  success
end

def put(string)
  print string
  STDOUT.flush
end

def ask(message)
  put message + " [y/n] "
  answer = STDIN.getc
  puts "\n"
  if answer == 'y' || answer == 'n' then answer else ask message end
end

def invoke(task)
  Rake::Task[task].invoke
end

def load(file_path)
  File.open(file_path, "r") { |file| file.read }
end

def save(file_path, string)
  File.open(file_path, "w") { |file| file.write string }
end

def push(source, destination)
  run "rsync --archive --delete --quiet #{source} #{destination}"
end

def replace(file_path, pattern, replacement)
  string = load file_path
  string.gsub! pattern, replacement
  save file_path, string
end

def gem?(name)
  if `gem list #{name}`.strip.length > 0 then name else nil end
end

def command?(name)
  `which #{name}`.match /.+/
end

def dirty?
  `git status --porcelain`.length > 0
end

# ---------------------------------------------------------- Custom Tasks ------

# desc "profile code & report results"
# task :profile => ['profile:collect', 'profile:details', 'profile:summary']
#
# task 'profile:collect' => [:prepare] do
#   configure 'clang:profile'
#
#   put "Preparing ... "
#   run "rm -rf build/coverage"
#   run "mkdir build/coverage"
#   run "mkdir build/coverage/metal"
#   puts OK
#
#   put "Copying source files ... "
#   run "cp source/*.h build/coverage/metal"
#   run "cp source/*.c build/coverage"
#   run "cp tests/*.c build/coverage"
#   puts OK
#
#   put "Building (#{$config[:title]}) ... "
#   run "cd build/coverage; #{compiler} #{flags} -I../coverage -iquote../../source -iquote../../tests *.c -o coverage"
#   puts OK
#
#   puts "Profiling by running #{WHITE_BRIGHT}Metal#{RESET} tests (#{$config[:title]}) ..."
#   run "cd build/coverage; ./coverage"
# end
#
# task 'profile:summary' => [:prepare, 'profile:collect'] do
#   puts ""
#   puts "--------------------------------------------------- Code Coverage Results ------"
#
#   source_files = `cd source; find *.c`.split("\n").join(" ")
#   raw = `cd build/coverage; gcov #{source_files} 2> gcov-error.log`
#
#   results = raw.scan /File '(.*)'\nLines executed:(\d+\.\d+)% of (\d+)/
#   results = results.reject do |result|
#     result[0].start_with? "test" or result[0].start_with? "__" or result[0].include? "/" or result[2].include? "no functions found"
#   end
#
#   total_number_of_lines = 0
#   total_number_of_lines_covered = 0
#
#   details = results.collect do |result|
#     detail = {}
#     detail[:title] = result[0]
#     detail[:fraction] = result[1].to_f / 100.0
#     detail[:number_of_lines] = result[2].to_i
#     detail[:number_of_lines_covered] = detail[:fraction] * detail[:number_of_lines]
#
#     total_number_of_lines += detail[:number_of_lines]
#     total_number_of_lines_covered += detail[:number_of_lines_covered]
#
#     detail
#   end
#
#   details.reverse.each do |detail|
#     color = RED
#     color = YELLOW if detail[:fraction] >= 0.7
#     color = GREEN if detail[:fraction] >= 0.9
#
#     title = detail[:title]
#     fraction = (detail[:fraction] * 100).to_i.to_s + " %"
#     number_of_lines = detail[:number_of_lines_covered].round.to_s +  " of " + detail[:number_of_lines].to_s
#
#     printf "#{WHITE_BRIGHT}%-40s #{BLACK_BRIGHT}%20s #{color}%18s#{RESET}\n", title, number_of_lines, fraction
#   end
#
#   total_title = "Total"
#   total_fraction = if total_number_of_lines != 0 then (total_number_of_lines_covered / total_number_of_lines) * 100 else 0 end
#   total_number_of_lines = total_number_of_lines.to_s
#
#   color = RED
#   color = YELLOW if total_fraction >= 70
#   color = GREEN if total_fraction >= 90
#
#   printf "\nUnit tests cover #{color}%s#{RESET} of %s executable lines of code.\n\n", total_fraction.to_i.to_s + "%", total_number_of_lines
# end
#
# desc ""
# task 'profile:details' => ['profile:collect'] do
#   source_files = `cd source; find *.c`.split("\n").each do |source_file|
#     raw = `cd build/coverage; gcov -f #{source_file} 2> gcov-error.log`
#
#     results = raw.scan /Function '(.*)'\nLines executed:(\d+\.\d+)% of (\d+)/
#     results = results.reject do |result|
#       result[0].start_with? "_-" or result[0].start_with? "__" or result[0].include? "/" or result[2].include? "no functions found"
#     end
#
#     dashes = "-" * (80 - 6 - 6 - 1 - 1 - source_file.size)
#     puts "\n------#{dashes} #{WHITE_BRIGHT + source_file + RESET} ------"
#
#     details = results.collect do |result|
#       detail = {}
#       detail[:title] = result[0]
#       detail[:fraction] = result[1].to_f / 100.0
#       detail[:number_of_lines] = result[2].to_i
#       detail[:number_of_lines_covered] = detail[:fraction] * detail[:number_of_lines]
#       detail
#     end
#
#     details.reverse.each do |detail|
#       color = RED
#       color = YELLOW if detail[:fraction] >= 0.7
#       color = GREEN if detail[:fraction] >= 0.9
#
#       title = detail[:title]
#       fraction = (detail[:fraction] * 100).to_i.to_s + " %"
#       number_of_lines = detail[:number_of_lines_covered].round.to_s + " of " +  detail[:number_of_lines].to_s
#
#       printf "#{WHITE_BRIGHT}%-40s #{BLACK_BRIGHT}%20s #{color}%18s#{RESET}\n", title, number_of_lines, fraction
#     end
#   end
# end
